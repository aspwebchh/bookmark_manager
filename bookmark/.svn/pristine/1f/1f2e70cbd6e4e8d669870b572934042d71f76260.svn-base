///<reference path="jquery/jquery.d.ts" />
///<reference path="menu.ts" />

namespace BookMark {
    enum BookMarkDataItemState {
        Normal,
        New,
        Rename
    }

    type BookMarkDataItem = {
        id: number
        pid: number
        title: string
        state?: BookMarkDataItemState
        isOpen?: Boolean
    };

    export abstract class BookMarkNode {
        protected nodeList: BookMarkNode[];
        protected data: BookMarkDataItem;

        constructor(data: BookMarkDataItem) {
            this.nodeList = [];
            this.data = data;
        }

        public getSource(): BookMarkDataItem {
            return this.data;
        }

        public addChild(node: BookMarkNode): void {
            this.nodeList.push(node);
        }

        public getNodeId(): string {
            let id = "node_index_" + this.data.id;
            return id;
        }

        public getNodeElement(): JQuery {
            return $(document.getElementById(this.getNodeId()));
        }

        public onRenderComplete(): void {
            let ele = this.getNodeElement();
            let input = ele.children("a").children("input");
            setTimeout(() => { input.select();}, 1);
            input.bind("blur", () => {
                this.data.state = BookMarkDataItemState.Normal;
                this.data.title = input.val();
                input.replaceWith(this.data.title);
            });
        }

        public abstract onNodeClick(): void;

        public abstract toHtml(): string;

        protected content(): string {
            let html = "";
            if (this.data.state == BookMarkDataItemState.New || this.data.state == BookMarkDataItemState.Rename) {
                html += "<a><input type='text' value='" + this.data.title + "' /></a>";
            } else {
                html += "<a>" + this.data.title + "</a>";
            }
            return html;
        }
    }


    class BookMarkListNode extends BookMarkNode {
        public toHtml(): string {
            let html = "<li id='" + this.getNodeId() + "' class='node_list'>";
            html += "<span class='icon'>&nbsp;</span>";
            html += this.content();
            html += "<ul style='display:none;'>";
            this.nodeList.forEach(item => html += item.toHtml());
            html += "</ul>";
            html += "</li>";
            return html;
        }

        public onRenderComplete() {
            super.onRenderComplete();
            let ele = this.getNodeElement();
            ele.children("a").addClass("close");
            this.toggle();
        }

        private toggle(): void {
            let ele = this.getNodeElement();
            let btn = ele.children("a");
            let list = ele.children("ul");
            let icon = ele.children("span");
            btn.removeClass("close");
            btn.removeClass("open");
            if (this.data.isOpen) {
                btn.addClass("open");
                icon.addClass("open");
                this.data.isOpen = true;
                list.show();
            } else {
                list.hide();
                btn.addClass("close");
                icon.removeClass("open");
                this.data.isOpen = false;
            }
        }

        public onNodeClick() {
            this.data.isOpen = this.data.isOpen ? false : true;
            this.toggle();
        }
    }

    class BookMarkRoot extends BookMarkListNode {
        public toHtml(): string {
            let html = "<div>";
            this.nodeList.forEach(item => html += item.toHtml());
            html += "</div>";
            return html;
        }

        public onRenderComplete() {
            super.onRenderComplete();
        }

        public onNodeClick() {

        }
    }

    class BookMarkLeaf extends BookMarkNode {
        public toHtml(): string {
            let html = "<li id='" + this.getNodeId() + "' class='node_leaf'>";
            html += this.content();
            html += "</li>";
            return html;
        }

        public onRenderComplete() {
            super.onRenderComplete();
            let ele = this.getNodeElement();
            ele.children("a").addClass("close");
        }

        public onNodeClick() {

        }
    }

    interface NodeTableItem {
        [index:string]: BookMarkNode
    }

    interface OnNodeClick {
        (arg:BookMarkDataItem): void;
    }

    export class BookMarkManager {
        private static nodeTable = {} as NodeTableItem;

        private bookMarkData: BookMarkDataItem[] = [];

        private ele: JQuery;

        constructor() { }

        private findMaxId(): number {
            return this.bookMarkData.sort((a, b) => b.id - a.id)[0].id;
        }

        private findChild(id: number): BookMarkDataItem[] {
            return this.bookMarkData.filter((item) => item.pid == id);
        }

        private getParent(pid: number): BookMarkDataItem {
            let result = this.bookMarkData.filter((item) => item.id == pid);
            return result.length > 0 ? result[0] : null;
        }

        private findDataItem(id: number): BookMarkDataItem {
            return this.bookMarkData.filter(item =>item.id == id)[0];
        }


        private genNode(id: number): BookMarkNode {
            let childNodeList = this.findChild(id);
            let dataItem = this.findDataItem(id);
            let node: BookMarkNode;
            if (childNodeList.length > 0) {
                if (id == 0) {
                    node = new BookMarkRoot(dataItem);
                } else {
                    node = new BookMarkListNode(dataItem);
                }
                childNodeList.forEach(item => node.addChild(this.genNode(item.id)));
            } else {
                node = new BookMarkLeaf(dataItem);
            }
            BookMarkManager.nodeTable[node.getNodeId()] = node;
            return node;
        }

        public addBookMarkData(dataItem: BookMarkDataItem) {
            this.bookMarkData.push(dataItem);
        }

        private removeBookMarkData(id: number) {
            let removeById = (id: number) => {
                this.bookMarkData = this.bookMarkData.filter(item => item.id != id);
                let childs = this.findChild(id);
                childs.forEach(item => removeById(item.id));
            };
            removeById(id);
        }

        public render(targetEleId: string): void {
            let rightClickMenu = new BookMarkRightClickMenu();
            rightClickMenu.onAddDir = () => {
                let node = rightClickMenu.getTargetNode();
                node.getSource().isOpen = true;
                let nodeDataItem: BookMarkDataItem = { id: this.findMaxId() + 1, pid: node.getSource().id, title: "新建文件夹", state: BookMarkDataItemState.New };
                this.addBookMarkData(nodeDataItem);
                this.render(targetEleId);
                
            };
            rightClickMenu.onAddPage = () => {
                
            };
            rightClickMenu.onDel = () => {
                let node = rightClickMenu.getTargetNode();
                this.removeBookMarkData(node.getSource().id);
                this.render(targetEleId);
            };
            rightClickMenu.onRename = () => {
                let node = rightClickMenu.getTargetNode();
                node.getSource().state = BookMarkDataItemState.Rename;
                this.render(targetEleId);
            };
            rightClickMenu.render();

            this.bookMarkData.sort((a, b) => a.id - b.id);
            let bookMarkNode = this.genNode(0);
            this.ele = $(document.getElementById(targetEleId)).html(bookMarkNode.toHtml());
            bookMarkNode.getNodeElement().children("ul").show();

            for (let key in BookMarkManager.nodeTable) {
                let node = BookMarkManager.nodeTable[key];
                node.onRenderComplete();
            }

            let btns = this.ele.find("a");
            btns.bind("click", (e: JQueryEventObject) => {
                let nodeId = $(e.target).parents("li").attr("id");
                let node = BookMarkManager.nodeTable[nodeId];
                node.onNodeClick();
                this.onNodeClick(node.getSource());
            });

            btns.bind("mouseup", (e: JQueryEventObject) => {
                if (e.button == 2) {
                    let nodeId = $(e.target).parents("li").attr("id");
                    let node = BookMarkManager.nodeTable[nodeId];
                    let offset = node.getNodeElement().offset();
                    rightClickMenu.show(e.pageX + 2, e.pageY + 2);
                    rightClickMenu.setTargetNode(node);
                }
            });

            btns.bind("contextmenu",  (e: JQueryEventObject) => {
                e.preventDefault();
            });

            this.initDragNode();
        }

        private initDragNode(): void {
            let btns = this.ele.find("a");

            let startX: number;
            let startY: number;
            let currX: number;
            let currY: number;
            let nodeX: number;
            let nodeY: number;
            let cloneNode: JQuery;
            let isDrag: boolean;

            btns.bind("mousedown", (e: JQueryEventObject) => {
                if (e.target.tagName == "INPUT") {
                    return;
                }
                let target = $(e.target);
                startX = e.pageX;
                startY = e.pageY;
                cloneNode = target.clone();
                nodeX = target.offset().left;
                nodeY = target.offset().top;
                $("body").append(cloneNode);
                cloneNode.hide();
                isDrag = true;
                e.preventDefault();
            });

            $("body").bind("mouseup", (e: JQueryEventObject) => {
                if (isDrag) {
                    cloneNode.remove();
                    cloneNode = null;
                    currX = 0;
                    currY = 0;
                    startX = 0;
                    startX = 0;
                    isDrag = false;
                }
            });

            $("body").bind("mousemove", (e: JQueryEventObject) => {
                if (!isDrag) {
                    return;
                }
                currX = e.pageX;
                currY = e.pageY;
                let posX = nodeX + currX - startX;
                let posY = nodeY + currY - startY;
                cloneNode.css({
                    "position": "absolute",
                    "left": posX,
                    "top": posY
                }).show();
            });

            btns.bind("mouseout", (e: JQueryEventObject) => {
               
            });

            btns.bind("mouseover", (e: JQueryEventObject) => {

            });
        }

        public onNodeClick: OnNodeClick;
    }

    let bm = new BookMarkManager();
    bm.addBookMarkData({ id: 0, pid: -1, title: "" });

    bm.addBookMarkData({ id: 1, pid: 0, title: "目录1"});
    bm.addBookMarkData({ id: 2, pid: 0, title: "目录2"});
    bm.addBookMarkData({ id: 3, pid: 0, title: "目录3" });

    bm.addBookMarkData({ id: 11, pid: 1, title: "目录11"});
    bm.addBookMarkData({ id: 12, pid: 1, title: "目录12"});

    bm.addBookMarkData({ id: 21, pid: 2, title: "目录21"});
    bm.addBookMarkData({ id: 22, pid: 2, title: "目录22"});

    bm.addBookMarkData({ id: 211, pid: 21, title: "目录211"});
    bm.addBookMarkData({ id: 212, pid: 21, title: "目录212"});

    bm.onNodeClick = (arg: BookMarkDataItem) => {
        
    };
    bm.render("bookmark_nav");
}
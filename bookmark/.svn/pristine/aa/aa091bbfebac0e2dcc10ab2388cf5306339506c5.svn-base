///<reference path="jquery/jquery.d.ts" />
///<reference path="menu.ts" />

namespace BookMark {
    type BookMarkDataItem = {
        id: number
        pid: number
        title: string
    };

    abstract class BookMarkNode {
        protected nodeList: BookMarkNode[];
        protected data: BookMarkDataItem;
        private nodeNum: number;

        constructor(data: BookMarkDataItem) {
            this.nodeList = [];
            this.data = data;
            this.nodeNum = ++BookMarkNode.nodeNum;
        }

        public getSource(): BookMarkDataItem {
            return this.data;
        }

        public addChild(node: BookMarkNode): void {
            this.nodeList.push(node);
        }

        public getNodeId(): string {
            let id = "node_index_" + this.nodeNum;
            return id;
        }

        public getNodeElement(): JQuery {
            return $(document.getElementById(this.getNodeId()));
        }

        public abstract onRenderComplete(): void;

        public abstract onNodeClick(): void;

        public abstract toHtml(): string;

        private static nodeNum = 0;
    }


    class BookMarkListNode extends BookMarkNode {
        public toHtml(): string {
            let html = "<li id='" + this.getNodeId() + "' class='node_list'>";
            html += "<span class='icon'>&nbsp;</span>";
            html += "<a>" + this.data.title + "</a>";
            html += "<ul style='display:none;'>";
            this.nodeList.forEach(item => html += item.toHtml());
            html += "</ul>";
            html += "</li>";
            return html;
        }

        public onRenderComplete() {
            let ele = this.getNodeElement();
            ele.children("a").addClass("close");
        }

        public onNodeClick() {
            let ele = this.getNodeElement();
            let btn = ele.children("a");
            let list = ele.children("ul");
            let icon = ele.children("span");
            ele.children("ul").toggle();
            btn.removeClass("close");
            btn.removeClass("open");
            if (list.is(":hidden")) {
                btn.addClass("close");
                icon.removeClass("open");
            } else {
                btn.addClass("open");
                icon.addClass("open");
                
            }
        }
    }

    class BookMarkRoot extends BookMarkListNode {
        public toHtml(): string {
            let html = "<div>";
            this.nodeList.forEach(item => html += item.toHtml());
            html += "</div>";
            return html;
        }

        public onRenderComplete() {
            
        }

        public onNodeClick() {

        }
    }

    class BookMarkLeaf extends BookMarkNode {
        public toHtml(): string {
            let html = "<li id='" + this.getNodeId() + "' class='node_leaf'>";
            html += "<a>" + this.data.title + "</a>";
            html += "</li>";
            return html;
        }

        public onRenderComplete() {
            let ele = this.getNodeElement();
            ele.children("a").addClass("close");
        }

        public onNodeClick() {

        }
    }

    interface NodeTableItem {
        [index:string]: BookMarkNode
    }

    interface OnNodeClick {
        (arg:BookMarkDataItem): void;
    }

    export class BookMarkManager {
        private static nodeTable = {} as NodeTableItem;

        private bookMarkData: BookMarkDataItem[] = [];

        constructor() { }

        private findChild(id: number): BookMarkDataItem[] {
            return this.bookMarkData.filter((item) => item.pid == id);
        }

        private getParent(pid: number): BookMarkDataItem {
            let result = this.bookMarkData.filter((item) => item.id == pid);
            return result.length > 0 ? result[0] : null;
        }

        private findDataItem(id: number): BookMarkDataItem {
            return this.bookMarkData.filter(item =>item.id == id)[0];
        }


        private genNode(id: number): BookMarkNode {
            let childNodeList = this.findChild(id);
            let dataItem = this.findDataItem(id);
            let node: BookMarkListNode;
            if (childNodeList.length > 0) {
                if (id == 0) {
                    node = new BookMarkRoot(dataItem);
                } else {
                    node = new BookMarkListNode(dataItem);
                }
                childNodeList.forEach(item => node.addChild(this.genNode(item.id)));
            } else {
                node = new BookMarkLeaf(dataItem);
            }
            BookMarkManager.nodeTable[node.getNodeId()] = node;
            return node;
        }

        public addBookMarkData(dataItem: BookMarkDataItem) {
            this.bookMarkData.push(dataItem);
        }

        public render(targetEleId: string): void {
            let bookMarkNode = this.genNode(0);
            let ele = $(document.getElementById(targetEleId)).html(bookMarkNode.toHtml());
            bookMarkNode.getNodeElement().children("ul").show();

            for (let key in BookMarkManager.nodeTable) {
                let node = BookMarkManager.nodeTable[key];
                node.onRenderComplete();
            }

            var btns = ele.find("a");
            btns.bind("click", (e: JQueryEventObject) => {
                let nodeId = $(e.target).parent().attr("id");
                let node = BookMarkManager.nodeTable[nodeId];
                node.onNodeClick();
                this.onNodeClick(node.getSource());
            });

            btns.bind("mouseup", (e: JQueryEventObject) => {
                if (e.button == 2) {
                    let nodeId = $(e.target).parent().attr("id");
                    let node = BookMarkManager.nodeTable[nodeId];
                    let menu = new BookMarkRightClickMenu();
                    menu.render();
                }
            });

            btns.bind("contextmenu",  (e: JQueryEventObject) => {
                e.preventDefault();
            });

            btns.bind("mousedown", (e: JQueryEventObject) => {
                e.preventDefault();
            });
        }

        public onNodeClick: OnNodeClick;
    }

    let bm = new BookMarkManager();
    bm.addBookMarkData({ id: 0, pid: -1, title: "" });

    bm.addBookMarkData({ id: 1, pid: 0, title: "目录1"});
    bm.addBookMarkData({ id: 2, pid: 0, title: "目录2"});
    bm.addBookMarkData({ id: 3, pid: 0, title: "目录3" });

    bm.addBookMarkData({ id: 11, pid: 1, title: "目录11"});
    bm.addBookMarkData({ id: 12, pid: 1, title: "目录12"});

    bm.addBookMarkData({ id: 21, pid: 2, title: "目录21"});
    bm.addBookMarkData({ id: 22, pid: 2, title: "目录22"});

    bm.addBookMarkData({ id: 211, pid: 21, title: "目录211"});
    bm.addBookMarkData({ id: 212, pid: 21, title: "目录212"});

    bm.onNodeClick = (arg: BookMarkDataItem) => {
        
    };

    bm.render("bookmark_nav");
}
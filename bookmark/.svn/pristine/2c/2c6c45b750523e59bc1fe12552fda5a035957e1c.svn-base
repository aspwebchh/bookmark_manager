var BookMark;
(function (BookMark) {
    var BookMarkPageList = (function () {
        function BookMarkPageList() {
            this.dataList = [];
            this.onItemAdd = function (data) { };
            this.onItemEdit = function (data) { };
            this.onItemDel = function (data) { };
            this.onRightClick = function (e, dataItem) { };
        }
        BookMarkPageList.prototype.getSource = function () {
            return this.dataList;
        };
        BookMarkPageList.prototype.getDataItem = function (id) {
            return this.dataList.filter(function (n) { return id == n.id; })[0];
        };
        BookMarkPageList.prototype.add = function (dataItem) {
            this.dataList.push(dataItem);
        };
        BookMarkPageList.prototype.genStdUrl = function (url) {
            if (!/^http(s)?:\/\//.test(url)) {
                url = "http://" + url;
            }
            return url;
        };
        BookMarkPageList.prototype.editItem = function (id) {
            var _this = this;
            var itemElement = $("[data-id=" + id + "]");
            var dataItem = this.getDataItem(id);
            var itemContentHtml = "<span class=\"title\">\n                                <input type=\"text\" name='title' value='" + dataItem.title + "'/>\n                            </span>\n                            <span class-=\"url\">\n                                <input type=\"text\" name='url' value='" + dataItem.url + "' />\n                            </span>";
            itemElement.html(itemContentHtml);
            var getTitleElement = function () { return itemElement.find('[name=title]'); };
            var getUrlElement = function () { return itemElement.find('[name=url]'); };
            getTitleElement().select().focus();
            var editItemHandler = function (e) {
                if (itemElement.get(0).contains(e.target)) {
                    return;
                }
                var title = $.trim(getTitleElement().val());
                var url = $.trim(getUrlElement().val());
                if (title != "" && url != "") {
                    url = _this.genStdUrl(url);
                    dataItem.title = title;
                    dataItem.url = url;
                    _this.onItemEdit(dataItem);
                    _this.reRender();
                }
                $(document).unbind("click", editItemHandler);
            };
            //document的click事件自动触发问题
            window.setTimeout(function () {
                $(document).bind("click", editItemHandler);
            }, 1);
        };
        BookMarkPageList.prototype.newItem = function () {
            var _this = this;
            var html = "<li>\n                            <span class=\"title\">\n                                <input type=\"text\" name='title'/>\n                            </span>\n                            <span class-=\"url\">\n                                <input type=\"text\" name='url' />\n                            </span>\n                        </li>";
            var newItemEle = $(html);
            this.ele.append(newItemEle);
            var getTitleElement = function () { return newItemEle.find('[name=title]'); };
            var getUrlElement = function () { return newItemEle.find('[name=url]'); };
            getTitleElement().focus().select();
            var newItemHandler = function (e) {
                if (newItemEle.get(0).contains(e.target)) {
                    return;
                }
                var title = $.trim(getTitleElement().val());
                var url = $.trim(getUrlElement().val());
                if (title != "" && url != "") {
                    url = _this.genStdUrl(url);
                    var maxId = _this.dataList.reduce(function (result, item, index, list) { return result < item.id ? item.id : result; }, 0);
                    var newId = maxId + 1;
                    var newItemData = { id: newId, title: title, url: url };
                    _this.add(newItemData);
                    _this.onItemAdd(newItemData);
                }
                _this.reRender();
                //newItemEle.remove();
                $(document).unbind("click", newItemHandler);
            };
            window.setTimeout(function () {
                $(document).bind("click", newItemHandler);
            }, 1);
        };
        BookMarkPageList.prototype.empty = function () {
            this.dataList = [];
            this.reRender();
        };
        BookMarkPageList.prototype.render = function (targetElementId) {
            var _this = this;
            this.targetElementId = targetElementId;
            var html = this.dataList.reduce(function (result, ele, index, list) {
                return result + ("<li data-id='" + ele.id + "'>\n                                <a class=\"title\">" + ele.title + "</a>\n                                <a class-=\"url\">" + ele.url + "</a>\n                            </li>");
            }, "");
            this.ele = $("#" + targetElementId).html(html);
            this.ele.find("li").bind("contextmenu", function (e) {
                var liElement = e.target.tagName == 'LI' ? $(e.target) : $(e.target).parents("li");
                var dataId = parseInt(liElement.attr("data-id"));
                var dataItem = _this.getDataItem(dataId);
                _this.onRightClick(e, dataItem);
                e.preventDefault();
            });
        };
        BookMarkPageList.prototype.reRender = function () {
            this.render(this.targetElementId);
        };
        BookMarkPageList.prototype.removeItem = function (id) {
            this.onItemDel(this.getDataItem(id));
            this.dataList = this.dataList.filter(function (n) { return n.id != id; });
            this.reRender();
        };
        return BookMarkPageList;
    }());
    BookMark.BookMarkPageList = BookMarkPageList;
})(BookMark || (BookMark = {}));
//# sourceMappingURL=bookmark_page_list.js.map
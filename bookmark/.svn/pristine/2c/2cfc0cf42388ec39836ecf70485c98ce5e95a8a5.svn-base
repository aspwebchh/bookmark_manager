///<reference path="jquery/jquery.d.ts" />
///<reference path="menu.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BookMark;
(function (BookMark) {
    var BookMarkNode = (function () {
        function BookMarkNode(data) {
            this.nodeList = [];
            this.data = data;
            this.nodeNum = ++BookMarkNode.nodeNum;
        }
        BookMarkNode.prototype.getSource = function () {
            return this.data;
        };
        BookMarkNode.prototype.addChild = function (node) {
            this.nodeList.push(node);
        };
        BookMarkNode.prototype.getNodeId = function () {
            var id = "node_index_" + this.nodeNum;
            return id;
        };
        BookMarkNode.prototype.getNodeElement = function () {
            return $(document.getElementById(this.getNodeId()));
        };
        BookMarkNode.nodeNum = 0;
        return BookMarkNode;
    }());
    var BookMarkListNode = (function (_super) {
        __extends(BookMarkListNode, _super);
        function BookMarkListNode() {
            _super.apply(this, arguments);
        }
        BookMarkListNode.prototype.toHtml = function () {
            var html = "<li id='" + this.getNodeId() + "' class='node_list'>";
            html += "<span class='icon'>&nbsp;</span>";
            html += "<a>" + this.data.title + "</a>";
            html += "<ul style='display:none;'>";
            this.nodeList.forEach(function (item) { return html += item.toHtml(); });
            html += "</ul>";
            html += "</li>";
            return html;
        };
        BookMarkListNode.prototype.onRenderComplete = function () {
            var ele = this.getNodeElement();
            ele.children("a").addClass("close");
        };
        BookMarkListNode.prototype.onNodeClick = function () {
            var ele = this.getNodeElement();
            var btn = ele.children("a");
            var list = ele.children("ul");
            var icon = ele.children("span");
            ele.children("ul").toggle();
            btn.removeClass("close");
            btn.removeClass("open");
            if (list.is(":hidden")) {
                btn.addClass("close");
                icon.removeClass("open");
            }
            else {
                btn.addClass("open");
                icon.addClass("open");
            }
        };
        return BookMarkListNode;
    }(BookMarkNode));
    var BookMarkRoot = (function (_super) {
        __extends(BookMarkRoot, _super);
        function BookMarkRoot() {
            _super.apply(this, arguments);
        }
        BookMarkRoot.prototype.toHtml = function () {
            var html = "<div>";
            this.nodeList.forEach(function (item) { return html += item.toHtml(); });
            html += "</div>";
            return html;
        };
        BookMarkRoot.prototype.onRenderComplete = function () {
        };
        BookMarkRoot.prototype.onNodeClick = function () {
        };
        return BookMarkRoot;
    }(BookMarkListNode));
    var BookMarkLeaf = (function (_super) {
        __extends(BookMarkLeaf, _super);
        function BookMarkLeaf() {
            _super.apply(this, arguments);
        }
        BookMarkLeaf.prototype.toHtml = function () {
            var html = "<li id='" + this.getNodeId() + "' class='node_leaf'>";
            html += "<a>" + this.data.title + "</a>";
            html += "</li>";
            return html;
        };
        BookMarkLeaf.prototype.onRenderComplete = function () {
            var ele = this.getNodeElement();
            ele.children("a").addClass("close");
        };
        BookMarkLeaf.prototype.onNodeClick = function () {
        };
        return BookMarkLeaf;
    }(BookMarkNode));
    var BookMarkManager = (function () {
        function BookMarkManager() {
            this.bookMarkData = [];
        }
        BookMarkManager.prototype.findChild = function (id) {
            return this.bookMarkData.filter(function (item) { return item.pid == id; });
        };
        BookMarkManager.prototype.getParent = function (pid) {
            var result = this.bookMarkData.filter(function (item) { return item.id == pid; });
            return result.length > 0 ? result[0] : null;
        };
        BookMarkManager.prototype.findDataItem = function (id) {
            return this.bookMarkData.filter(function (item) { return item.id == id; })[0];
        };
        BookMarkManager.prototype.genNode = function (id) {
            var _this = this;
            var childNodeList = this.findChild(id);
            var dataItem = this.findDataItem(id);
            var node;
            if (childNodeList.length > 0) {
                if (id == 0) {
                    node = new BookMarkRoot(dataItem);
                }
                else {
                    node = new BookMarkListNode(dataItem);
                }
                childNodeList.forEach(function (item) { return node.addChild(_this.genNode(item.id)); });
            }
            else {
                node = new BookMarkLeaf(dataItem);
            }
            BookMarkManager.nodeTable[node.getNodeId()] = node;
            return node;
        };
        BookMarkManager.prototype.addBookMarkData = function (dataItem) {
            this.bookMarkData.push(dataItem);
        };
        BookMarkManager.prototype.render = function (targetEleId) {
            var _this = this;
            var bookMarkNode = this.genNode(0);
            var ele = $(document.getElementById(targetEleId)).html(bookMarkNode.toHtml());
            bookMarkNode.getNodeElement().children("ul").show();
            for (var key in BookMarkManager.nodeTable) {
                var node = BookMarkManager.nodeTable[key];
                node.onRenderComplete();
            }
            var btns = ele.find("a");
            btns.bind("click", function (e) {
                var nodeId = $(e.target).parent().attr("id");
                var node = BookMarkManager.nodeTable[nodeId];
                node.onNodeClick();
                _this.onNodeClick(node.getSource());
            });
            btns.bind("mouseup", function (e) {
                if (e.button == 2) {
                    var nodeId = $(e.target).parent().attr("id");
                    var node = BookMarkManager.nodeTable[nodeId];
                    var menu = new BookMark.BookMarkRightClickMenu();
                    menu.render();
                }
            });
            btns.bind("contextmenu", function (e) {
                e.preventDefault();
            });
            btns.bind("mousedown", function (e) {
                e.preventDefault();
            });
        };
        BookMarkManager.nodeTable = {};
        return BookMarkManager;
    }());
    BookMark.BookMarkManager = BookMarkManager;
    var bm = new BookMarkManager();
    bm.addBookMarkData({ id: 0, pid: -1, title: "" });
    bm.addBookMarkData({ id: 1, pid: 0, title: "目录1" });
    bm.addBookMarkData({ id: 2, pid: 0, title: "目录2" });
    bm.addBookMarkData({ id: 3, pid: 0, title: "目录3" });
    bm.addBookMarkData({ id: 11, pid: 1, title: "目录11" });
    bm.addBookMarkData({ id: 12, pid: 1, title: "目录12" });
    bm.addBookMarkData({ id: 21, pid: 2, title: "目录21" });
    bm.addBookMarkData({ id: 22, pid: 2, title: "目录22" });
    bm.addBookMarkData({ id: 211, pid: 21, title: "目录211" });
    bm.addBookMarkData({ id: 212, pid: 21, title: "目录212" });
    bm.onNodeClick = function (arg) {
    };
    bm.render("bookmark_nav");
})(BookMark || (BookMark = {}));
//# sourceMappingURL=bookmark_container.js.map
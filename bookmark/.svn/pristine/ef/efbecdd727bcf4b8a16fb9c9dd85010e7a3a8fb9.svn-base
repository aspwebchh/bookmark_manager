//递归
let getMax = (list: number[]) => {
    if (list.length == 0) {
        return null;
    }
    let curr = list.pop();
    let next = getMax(list);
    return curr > next ? curr : next;
}

let take = (list: number[], count: number) : number[] => {
    if (count == 0 || list.length == 0) {
        return [];
    }
    let ele = list.shift();
    return [ele].concat(take(list, count - 1));
}

let replicate = (ele: string, count: number) => {
    if (count == 0) {
        return "";
    }
    return ele + replicate(ele, count - 1);
}


let reverse = (list: number[]) => {
    if (list.length == 0) {
        return [];
    }
    return [list.pop()].concat(reverse(list));
}



let exists = (list: number[], ele: number) => {
    if (list.length == 0) {
        return false;
    }
    if (list.pop() == ele) {
        return true;
    }
    return exists(list, ele);
}


let quickSort = (list: number[]): number[] => {
    if (list.length == 0) {
        return [];
    }
    let middle = list.pop();
    let left = list.filter(n => n <= middle);
    let right = list.filter(n => n > middle);
    return quickSort(left).concat([middle]).concat(quickSort(right));
}


//查询
let json = [
    { id: 1, pid: 0, title: "目录1" },
    { id: 2, pid: 0, title: "目录2" },
    { id: 3, pid: 0, title: "目录3" },
    { id: 11, pid: 1, title: "目录11" },
    { id: 12, pid: 1, title: "目录12" },
    { id: 21, pid: 2, title: "目录21" },
    { id: 22, pid: 2, title: "目录22" },
    { id: 211, pid: 21, title: "目录211" },
    { id: 212, pid: 21, title: "目录212" }
];

let pid21List = json.filter(n => n.pid == 21);
let json1 = json.map(n => n.title = n.title + "_" + n.id);

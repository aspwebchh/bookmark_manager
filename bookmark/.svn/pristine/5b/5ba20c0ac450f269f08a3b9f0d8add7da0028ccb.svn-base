//递归
let getMax = (list: number[]) => {
    if (list.length == 0) {
        return null;
    }
    let curr = list.pop();
    let next = getMax(list);
    return curr > next ? curr : next;
}

let getMax1 = (list: number[]) => {
    let max = 0;
    for (let i = 0; i < list.length; i++) {
        let item = list[i];
        if (item > max) {
            max = item;
        }
    }
    return max;
}

let take = (list: number[], count: number) : number[] => {
    if (count == 0 || list.length == 0) {
        return [];
    }
    let ele = list.shift();
    return [ele].concat(take(list, count - 1));
}


let take1 = (list: number[], count: number): number[] => {
    let result: number[] = [];
    for (let i = 0; i < count; i++) {
        result.push(list[i]);
    }
    return result
}

let replicate = (ele: string, count: number) => {
    if (count == 0) {
        return "";
    }
    return ele + replicate(ele, count - 1);
}


let reverse = (list: number[]) => {
    if (list.length == 0) {
        return [];
    }
    return [list.pop()].concat(reverse(list));
}



let exists = (list: number[], ele: number) => {
    if (list.length == 0) {
        return false;
    }
    if (list.pop() == ele) {
        return true;
    }
    return exists(list, ele);
}


let quickSort = (list: number[]): number[] => {
    if (list.length == 0) {
        return [];
    }
    let middle = list.pop();
    let left = list.filter(n => n <= middle);
    let right = list.filter(n => n > middle);
    return quickSort(left).concat([middle]).concat(quickSort(right));
}



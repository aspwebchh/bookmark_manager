namespace BookMark {
    export interface BookMarkPageDataItem {
        id: number,
        title: string,
        url: string
    }

    export class BookMarkPageList {
        private dataList: BookMarkPageDataItem[] = [];
        private ele: JQuery;

        public onItemAdd = (data: BookMarkPageDataItem) => { };

        public onRightClick = (e: JQueryEventObject) => { }

        public getSource() {
            return this.dataList;
        }

        public add(dataItem: BookMarkPageDataItem) {
            this.dataList.push(dataItem);
        }

        public newItem() {
            let html = `<li>
                            <span class="title">
                                <input type="text" name='title'/>
                            </span>
                            <span class-="url">
                                <input type="text" name='url' />
                            </span>
                        </li>`;
            let newItemEle = $(html)
            this.ele.append(newItemEle);

            let getTitleElement = () => newItemEle.find('[name=title]');
            let getUrlElement = () => newItemEle.find('[name=url]');
            getTitleElement().focus();

            let checkEmpty = (str: string) => str != "";

            let newItemHandler = (e: JQueryEventObject) => {
                if (newItemEle.get(0).contains(e.target)) {
                    return;
                }
                let title = $.trim(getTitleElement().val());
                let url = $.trim(getUrlElement().val());
                if (checkEmpty(title) && checkEmpty(url)) {
                    if (!/^http(s)?:\/\//.test(url)) {
                        url = "http://" + url;
                    }
                    let maxId = this.dataList.reduce<number>((result, item, index, list) => result < item.id ? item.id : result, 0)
                    let newId = maxId + 1;
                    let newItemData: BookMarkPageDataItem = { id: newId, title: title, url: url };
                    this.add(newItemData);
                    this.onItemAdd(newItemData);
                }
                newItemEle.remove();
                $(document).unbind("click", newItemHandler);
            }

            $(document).bind("click", newItemHandler);
        }

        public render(targetElementId: string) {
            let html = this.dataList.reduce<string>((result, ele, index, list) => {
                return result + `<li>
                                <a class="title">${ele.title}</a>
                                <a class-="url">${ele.url}</a>
                            </li>`;
            }, "");
            this.ele = $("#" + targetElementId).html(html);

            this.ele.find("li").bind("contextmenu", (e: JQueryEventObject) => {
                this.onRightClick(e);
                e.preventDefault();
            });
        }
    }
}
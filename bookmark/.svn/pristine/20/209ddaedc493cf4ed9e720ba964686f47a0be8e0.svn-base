///<reference path="common.ts" />
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var BookMark;
(function (BookMark) {
    class DataSource {
        static getCategories() {
            return __awaiter(this, void 0, Promise, function* () {
                let data = [];
                data.push({ id: 0, pid: -1, title: "" });
                data.push({ id: 1, pid: 0, title: `目录1` });
                data.push({ id: 2, pid: 0, title: `目录2` });
                data.push({ id: 3, pid: 0, title: `目录3` });
                data.push({ id: 11, pid: 1, title: `目录11` });
                data.push({ id: 12, pid: 1, title: `目录12` });
                data.push({ id: 21, pid: 2, title: `目录21` });
                data.push({ id: 22, pid: 2, title: `目录22` });
                data.push({ id: 211, pid: 21, title: `目录211` });
                data.push({ id: 212, pid: 21, title: `目录212` });
                return data;
            });
        }
        static updateCategories(data) {
            return __awaiter(this, void 0, Promise, function* () {
                return false;
            });
        }
    }
    BookMark.DataSource = DataSource;
})(BookMark || (BookMark = {}));
//# sourceMappingURL=data_source.js.map
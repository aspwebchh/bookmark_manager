///<reference path="jquery/jquery.d.ts" />
///<reference path="bookmark_right_click_menu.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BookMark;
(function (BookMark) {
    (function (BookMarkDataItemState) {
        BookMarkDataItemState[BookMarkDataItemState["Normal"] = 0] = "Normal";
        BookMarkDataItemState[BookMarkDataItemState["New"] = 1] = "New";
        BookMarkDataItemState[BookMarkDataItemState["Rename"] = 2] = "Rename";
    })(BookMark.BookMarkDataItemState || (BookMark.BookMarkDataItemState = {}));
    var BookMarkDataItemState = BookMark.BookMarkDataItemState;
    var BookMarkNode = (function () {
        function BookMarkNode(data) {
            this.onRename = function () { };
            this.nodeList = [];
            this.data = data;
        }
        BookMarkNode.prototype.getSource = function () {
            return this.data;
        };
        BookMarkNode.prototype.addChild = function (node) {
            this.nodeList.push(node);
        };
        BookMarkNode.prototype.getNodeId = function () {
            var id = "node_index_" + this.data.id;
            return id;
        };
        BookMarkNode.prototype.getNodeElement = function () {
            return $(document.getElementById(this.getNodeId()));
        };
        BookMarkNode.prototype.onRenderComplete = function () {
            var _this = this;
            var ele = this.getNodeElement();
            var input = ele.children("a").children("input");
            setTimeout(function () { input.select(); }, 1);
            input.bind("blur", function () {
                _this.data.state = BookMarkDataItemState.Normal;
                _this.data.title = input.val();
                input.replaceWith(_this.data.title);
                _this.onRename();
            });
        };
        BookMarkNode.prototype.content = function () {
            var html = "";
            if (this.data.state == BookMarkDataItemState.New || this.data.state == BookMarkDataItemState.Rename) {
                html += "<a><input type='text' value='" + this.data.title + "' /></a>";
            }
            else {
                html += "<a><span>" + this.data.title + "</span></a>";
            }
            return html;
        };
        return BookMarkNode;
    }());
    BookMark.BookMarkNode = BookMarkNode;
    var BookMarkListNode = (function (_super) {
        __extends(BookMarkListNode, _super);
        function BookMarkListNode() {
            _super.apply(this, arguments);
        }
        BookMarkListNode.prototype.toHtml = function () {
            var html = "<li id='" + this.getNodeId() + "' class='node_list'>";
            html += "<span class='icon'>&nbsp;</span>";
            html += this.content();
            html += "<ul style='display:none;'>";
            this.nodeList.forEach(function (item) { return html += item.toHtml(); });
            html += "</ul>";
            html += "</li>";
            return html;
        };
        BookMarkListNode.prototype.onRenderComplete = function () {
            _super.prototype.onRenderComplete.call(this);
            var ele = this.getNodeElement();
            ele.children("a").addClass("close");
            this.toggle();
        };
        BookMarkListNode.prototype.toggle = function () {
            var ele = this.getNodeElement();
            var btn = ele.children("a");
            var list = ele.children("ul");
            var icon = ele.children("span");
            btn.removeClass("close");
            btn.removeClass("open");
            if (this.data.isOpen) {
                btn.addClass("open");
                icon.addClass("open");
                this.data.isOpen = true;
                list.show();
            }
            else {
                list.hide();
                btn.addClass("close");
                icon.removeClass("open");
                this.data.isOpen = false;
            }
        };
        BookMarkListNode.prototype.onNodeClick = function () {
            this.data.isOpen = this.data.isOpen ? false : true;
            this.toggle();
        };
        return BookMarkListNode;
    }(BookMarkNode));
    var BookMarkRoot = (function (_super) {
        __extends(BookMarkRoot, _super);
        function BookMarkRoot() {
            _super.apply(this, arguments);
        }
        BookMarkRoot.prototype.toHtml = function () {
            var html = "<div class='tree'>";
            this.nodeList.forEach(function (item) { return html += item.toHtml(); });
            html += "</div>";
            return html;
        };
        BookMarkRoot.prototype.onRenderComplete = function () {
            _super.prototype.onRenderComplete.call(this);
        };
        BookMarkRoot.prototype.onNodeClick = function () {
        };
        return BookMarkRoot;
    }(BookMarkListNode));
    var BookMarkLeaf = (function (_super) {
        __extends(BookMarkLeaf, _super);
        function BookMarkLeaf() {
            _super.apply(this, arguments);
        }
        BookMarkLeaf.prototype.toHtml = function () {
            var html = "<li id='" + this.getNodeId() + "' class='node_leaf'>";
            html += this.content();
            html += "</li>";
            return html;
        };
        BookMarkLeaf.prototype.onRenderComplete = function () {
            _super.prototype.onRenderComplete.call(this);
            var ele = this.getNodeElement();
            ele.children("a").addClass("close");
        };
        BookMarkLeaf.prototype.onNodeClick = function () {
        };
        return BookMarkLeaf;
    }(BookMarkNode));
    var BookMarkManager = (function () {
        function BookMarkManager() {
            var _this = this;
            this.bookMarkData = [];
            this.getDataSource = function () { return _this.bookMarkData; };
            this.onNodeClick = function (arg) { };
            this.onRightClick = function (node, e) { };
            this.onRename = function (node) { };
            this.onMove = function () { };
        }
        BookMarkManager.prototype.findMaxId = function () {
            return this.bookMarkData.sort(function (a, b) { return b.id - a.id; })[0].id;
        };
        BookMarkManager.prototype.findChild = function (id) {
            return this.bookMarkData.filter(function (item) { return item.pid == id; });
        };
        BookMarkManager.prototype.getParent = function (pid) {
            var result = this.bookMarkData.filter(function (item) { return item.id == pid; });
            return result.length > 0 ? result[0] : null;
        };
        BookMarkManager.prototype.findDataItem = function (id) {
            return this.bookMarkData.filter(function (item) { return item.id == id; })[0];
        };
        BookMarkManager.prototype.genNode = function (id) {
            var _this = this;
            var childNodeList = this.findChild(id);
            var dataItem = this.findDataItem(id);
            var node;
            if (childNodeList.length > 0) {
                if (id == 0) {
                    node = new BookMarkRoot(dataItem);
                }
                else {
                    node = new BookMarkListNode(dataItem);
                }
                childNodeList.forEach(function (item) { return node.addChild(_this.genNode(item.id)); });
            }
            else {
                node = new BookMarkLeaf(dataItem);
            }
            BookMarkManager.nodeTable[node.getNodeId()] = node;
            node.onRename = function () {
                _this.onRename(node);
                _this.reRender();
            };
            return node;
        };
        BookMarkManager.prototype.addBookMarkData = function (dataItem) {
            this.bookMarkData.push(dataItem);
        };
        BookMarkManager.prototype.removeItem = function (id) {
            var _this = this;
            var removeById = function (id) {
                _this.bookMarkData = _this.bookMarkData.filter(function (item) { return item.id != id; });
                var childs = _this.findChild(id);
                childs.forEach(function (item) { return removeById(item.id); });
            };
            removeById(id);
            this.reRender();
        };
        BookMarkManager.prototype.reRender = function () {
            this.render(this.targetElementId);
        };
        BookMarkManager.prototype.newItem = function (parentId) {
            this.findDataItem(parentId).isOpen = true;
            var nodeDataItem = { id: this.findMaxId() + 1, pid: parentId, title: "新建文件夹", state: BookMarkDataItemState.New };
            this.addBookMarkData(nodeDataItem);
            this.reRender();
        };
        BookMarkManager.prototype.select = function (node) {
            for (var key in BookMarkManager.nodeTable) {
                BookMarkManager.nodeTable[key].getNodeElement().removeClass("select");
            }
            node.getNodeElement().addClass("select");
        };
        BookMarkManager.prototype.render = function (targetEleId) {
            var _this = this;
            this.targetElementId = targetEleId;
            this.bookMarkData.sort(function (a, b) { return a.id - b.id; });
            var bookMarkNode = this.genNode(0);
            this.ele = $(document.getElementById(targetEleId)).html(bookMarkNode.toHtml());
            bookMarkNode.getNodeElement().children("ul").show();
            for (var key in BookMarkManager.nodeTable) {
                var node = BookMarkManager.nodeTable[key];
                node.onRenderComplete();
            }
            var btns = this.ele.find("a");
            btns.bind("click", function (e) {
                var node = _this.getNodeOnElement(e.target);
                node.onNodeClick();
                _this.onNodeClick(node);
            });
            btns.bind("mouseup", function (e) {
                if (e.button == 2) {
                    var node = _this.getNodeOnElement(e.target);
                    _this.onRightClick(node, e);
                }
            });
            btns.bind("contextmenu", function (e) {
                e.preventDefault();
            });
            this.initDragNode();
        };
        BookMarkManager.prototype.getNodeOnElement = function (element) {
            var nodeId = $(element).parents("li").attr("id");
            var node = BookMarkManager.nodeTable[nodeId];
            return node;
        };
        BookMarkManager.prototype.isAncestorNode = function (ancestorNode, node) {
            var _this = this;
            var ancestorData = ancestorNode.getSource();
            var nodeData = node.getSource();
            var check = function (ancestor, curr) {
                if (curr == null) {
                    return false;
                }
                return ancestor.id == curr.pid || check(ancestor, _this.getParent(curr.pid));
            };
            return check(ancestorData, nodeData);
        };
        BookMarkManager.prototype.initDragNode = function () {
            var _this = this;
            var btns = this.ele.find("a");
            var startX;
            var startY;
            var currX;
            var currY;
            var cloneNode;
            var isDrag;
            var dragNode;
            var targetNode;
            btns.bind("mousedown", function (e) {
                if (e.target.tagName == "INPUT") {
                    return;
                }
                var getTarget = function () {
                    if (e.target.tagName == "SPAN") {
                        return $(e.target).parents("a");
                    }
                    else {
                        return $(e.target);
                    }
                };
                var target = getTarget();
                startX = e.pageX;
                startY = e.pageY;
                cloneNode = target.clone();
                $(".tree").append(cloneNode);
                cloneNode.hide();
                isDrag = true;
                dragNode = _this.getNodeOnElement(e.target);
                e.preventDefault();
            });
            $("body").bind("mouseup", function (e) {
                if (isDrag && targetNode != null) {
                    if (dragNode != targetNode && !_this.isAncestorNode(dragNode, targetNode)) {
                        dragNode.getSource().pid = targetNode.getSource().id;
                        targetNode.getSource().isOpen = true;
                        _this.reRender();
                        _this.onMove();
                        targetNode = null;
                    }
                }
                if (isDrag) {
                    cloneNode.remove();
                    cloneNode = null;
                    startX = 0;
                    startY = 0;
                    currX = 0;
                    currY = 0;
                    isDrag = false;
                    dragNode = null;
                }
            });
            $("body").bind("mousemove", function (e) {
                if (!isDrag) {
                    return;
                }
                currX = e.pageX;
                currY = e.pageY;
                if (!(Math.abs(currX - startX) > 10 || Math.abs(currY - startY) > 5)) {
                    return;
                }
                cloneNode.css({
                    "position": "absolute",
                    "left": currX,
                    "top": currY,
                    "opacity": "0.6"
                }).show();
            });
            btns.bind("mouseenter", function (e) {
                for (var key in BookMarkManager.nodeTable) {
                    BookMarkManager.nodeTable[key].getNodeElement().removeClass("selected");
                }
                if (isDrag) {
                    targetNode = _this.getNodeOnElement(e.target);
                    targetNode.getNodeElement().addClass("selected");
                }
            });
        };
        BookMarkManager.nodeTable = {};
        return BookMarkManager;
    }());
    BookMark.BookMarkManager = BookMarkManager;
})(BookMark || (BookMark = {}));
//# sourceMappingURL=bookmark_container.js.map
namespace BookMark {
    export interface BookMarkPageDataItem {
        id: number,
        title: string,
        url: string
    }

    export class BookMarkPageList {
        private dataList: BookMarkPageDataItem[] = [];
        private targetElementId: string;
        private ele: JQuery;

        public onItemAdd = (data: BookMarkPageDataItem) => { };
        public onItemEdit = (data: BookMarkPageDataItem) => { };
        public onRightClick = (e: JQueryEventObject, dataItem: BookMarkPageDataItem) => { }

        public getSource() {
            return this.dataList;
        }

        private getDataItem(id: number): BookMarkPageDataItem {
            return this.dataList.filter(n => id == n.id)[0];
        }

        public add(dataItem: BookMarkPageDataItem) {
            this.dataList.push(dataItem);
        }

        private genStdUrl (url:string): string{
            if (!/^http(s)?:\/\//.test(url)) {
                url = "http://" + url;
            }
            return url;
        }

        public editItem(id: number) {
            let itemElement = $(`[data-id=${id}]`);
            let dataItem = this.getDataItem(id);
            let itemContentHtml = `<span class="title">
                                <input type="text" name='title' value='${dataItem.title}'/>
                            </span>
                            <span class-="url">
                                <input type="text" name='url' value='${dataItem.url}' />
                            </span>`;
            itemElement.html(itemContentHtml);

            let getTitleElement = () => itemElement.find('[name=title]');
            let getUrlElement = () => itemElement.find('[name=url]');
            getTitleElement().select().focus();

            let editItemHandler = (e: JQueryEventObject) => {
                if (itemElement.get(0).contains(e.target)) {
                    return;
                }
                let title = $.trim(getTitleElement().val());
                let url = $.trim(getUrlElement().val());
                 if (title != "" && url != "") {
                     url = this.genStdUrl(url);
                     alert(url);
                 }

                 $(document).unbind("click", editItemHandler);
            };

            //document的click事件自动触发问题
            window.setTimeout(()=>{
                 $(document).bind("click", editItemHandler);
            },1);
        }

        public newItem() {
            let html = `<li>
                            <span class="title">
                                <input type="text" name='title'/>
                            </span>
                            <span class-="url">
                                <input type="text" name='url' />
                            </span>
                        </li>`;
            let newItemEle = $(html)
            this.ele.append(newItemEle);

            let getTitleElement = () => newItemEle.find('[name=title]');
            let getUrlElement = () => newItemEle.find('[name=url]');
            getTitleElement().focus().select();

            let newItemHandler = (e: JQueryEventObject) => {
                if (newItemEle.get(0).contains(e.target)) {
                    return;
                }
                let title = $.trim(getTitleElement().val());
                let url = $.trim(getUrlElement().val());
                if (title != "" && url != "") {
                    url = this.genStdUrl(url);
                    let maxId = this.dataList.reduce<number>((result, item, index, list) => result < item.id ? item.id : result, 0)
                    let newId = maxId + 1;
                    let newItemData: BookMarkPageDataItem = { id: newId, title: title, url: url };
                    this.add(newItemData);
                    this.onItemAdd(newItemData);
                }
                newItemEle.remove();
                $(document).unbind("click", newItemHandler);
            }

            $(document).bind("click", newItemHandler);
        }

        public render(targetElementId: string) {
            this.targetElementId = targetElementId;
            let html = this.dataList.reduce<string>((result, ele, index, list) => {
                return result + `<li data-id='${ele.id}'>
                                <a class="title">${ele.title}</a>
                                <a class-="url">${ele.url}</a>
                            </li>`;
            }, "");
            this.ele = $("#" + targetElementId).html(html);

            this.ele.find("li").bind("contextmenu", (e: JQueryEventObject) => {
                let liElement = e.target.tagName == 'LI' ? $(e.target) : $(e.target).parents("li");
                let dataId = parseInt(liElement.attr("data-id"));
                let dataItem = this.getDataItem(dataId);
                this.onRightClick(e, dataItem);
                e.preventDefault();
            });
        }

        private reRender(): void {
            this.render(this.targetElementId);
        }

        public removeItem(id: number): void {
            this.dataList = this.dataList.filter(n => n.id != id);
            this.reRender();
        }
    }
}